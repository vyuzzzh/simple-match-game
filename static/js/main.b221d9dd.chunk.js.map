{"version":3,"sources":["components/Card/Card.js","components/CardCollection/CardCollection.js","components/RestartButton/RestartButton.js","components/StatusGame/StatusGame.js","components/ScoreBoard/ScoreBoard.js","utils/Helper.js","App.js","serviceWorker.js","index.js"],"names":["Card","handleClick","id","flipped","icon","disabled","solved","className","onClick","size","CardCollection","cards","map","card","key","includes","RestartButton","resetGame","type","EndGame","endGame","ScoreBoard","miss","initializeDeck","originalArray","array","slice","i","length","randomIndex","Math","floor","random","tmp","shuffle","reduce","acc","push","App","useState","setCards","setFlipped","setSolved","setDisabled","setMiss","setEndGame","useEffect","resetCards","library","add","faAdjust","faAllergies","faAngry","faAnchor","faArchway","faAtom","faAsterisk","faBowlingBall","faQuestion","sameCardClicked","clickedCard","find","isMatch","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b221d9dd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './Card.css';\n\nconst Card = ({\n  handleClick, id, flipped, icon, disabled, solved,\n}) => (\n  <div\n    className={\n      `flip-container ${flipped || solved ? 'flipped' : ''} ${solved ? 'solved' : ''}`\n      }\n    onClick={() => (disabled ? null : handleClick(id))}\n  >\n    <div className=\"flipper\">\n      <FontAwesomeIcon\n        className={\n          flipped || solved ? 'front' : 'back'\n          }\n        icon={\n          flipped || solved ? icon : 'question'\n          }\n        size=\"5x\"\n      />\n    </div>\n  </div>\n);\n\nCard.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  flipped: PropTypes.bool.isRequired,\n  icon: PropTypes.string.isRequired,\n  disabled: PropTypes.bool.isRequired,\n  solved: PropTypes.bool.isRequired,\n};\n\nexport default Card;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '../Card/Card';\nimport './CardCollection.css';\n\nconst CardCollection = ({\n  cards, flipped, handleClick, disabled, solved,\n}) => (\n  <div className=\"collection\">\n    {\n      cards.map((card) => (\n        <Card\n          key={card.id}\n          id={card.id}\n          icon={card.icon}\n          flipped={flipped.includes(card.id)}\n          solved={solved.includes(card.id)}\n          handleClick={handleClick}\n          disabled={disabled || solved.includes(card.id)}\n        />\n      ))\n    }\n  </div>\n);\n\nCardCollection.propTypes = {\n  cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n  handleClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool.isRequired,\n  solved: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default CardCollection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './RestartButton.css';\n\nconst RestartButton = ({\n  resetGame,\n}) => (\n  <button className=\"btn restart\" type=\"button\" onClick={resetGame}>Restart</button>\n);\n\nRestartButton.propTypes = {\n  resetGame: PropTypes.func.isRequired,\n};\n\nexport default RestartButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RestartButton from '../RestartButton/RestartButton';\nimport './StatusGame.css';\n\nconst EndGame = ({\n  endGame, resetGame,\n}) => (\n  <div className=\"end\">\n    <p>\n      {\n        endGame ? 'The game is over. Try it again!' : 'Find all the matches!'\n      }\n    </p>\n    {\n      endGame && <RestartButton resetGame={resetGame} />\n    }\n  </div>\n);\n\nEndGame.propTypes = {\n  endGame: PropTypes.bool.isRequired,\n  resetGame: PropTypes.func.isRequired,\n};\n\nexport default EndGame;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ScoreBoard.css';\n\nconst ScoreBoard = ({\n  miss,\n}) => (\n  <div className=\"score\">\n    Errors already made:\n    {' '}\n    {miss}\n  </div>\n);\n\nScoreBoard.propTypes = {\n  miss: PropTypes.number.isRequired,\n};\n\nexport default ScoreBoard;\n","function shuffle(originalArray) {\n  const array = originalArray.slice(0);\n\n  for (let i = 0; i < originalArray.length - 1; i += 1) {\n    const randomIndex = Math.floor(Math.random() * (i + 1));\n    const tmp = array[i];\n    array[i] = array[randomIndex];\n    array[randomIndex] = tmp;\n  }\n\n  return array;\n}\n\nexport const initializeDeck = () => {\n  let id = 0;\n  const cards = [\n    'adjust', 'allergies', 'angry', 'anchor', 'archway', 'atom', 'asterisk', 'bowling-ball',\n  ].reduce((acc, icon) => {\n    acc.push({\n      id: id++,\n      icon,\n    });\n    acc.push({\n      id: id++,\n      icon,\n    });\n    return acc;\n  }, []);\n\n  return shuffle(cards);\n};\n\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const getValue = (values) => {\n  const rand = getRandomInt(0, values.length - 1);\n\n  return values[rand];\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faAdjust, faAllergies, faAngry, faAnchor,\n  faArchway, faAtom, faAsterisk, faBowlingBall, faQuestion,\n} from '@fortawesome/free-solid-svg-icons';\nimport CardCollection from './components/CardCollection/CardCollection';\nimport StatusGame from './components/StatusGame/StatusGame';\nimport ScoreBoard from './components/ScoreBoard/ScoreBoard';\nimport { initializeDeck } from './utils/Helper';\n\nconst App = () => {\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [solved, setSolved] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n  const [miss, setMiss] = useState(0);\n  const [endGame, setEndGame] = useState(false);\n\n  useEffect(() => {\n    setCards(initializeDeck());\n  }, []);\n\n  const sameCardClicked = (id) => flipped.includes(id);\n  const isMatch = (id) => {\n    const clickedCard = cards.find((card) => card.id === id);\n    const flippedCard = cards.find((card) => flipped[0] === card.id);\n    return flippedCard.icon === clickedCard.icon;\n  };\n\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n\n  const resetGame = () => {\n    setCards(initializeDeck());\n    setFlipped([]);\n    setSolved([]);\n    setDisabled(false);\n    setMiss(0);\n    setEndGame(false);\n  };\n\n  const handleClick = (id) => {\n    setDisabled(true);\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n    } else {\n      if (sameCardClicked(id)) return setDisabled(false);\n      setFlipped([flipped[0], id]);\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id]);\n        if (solved.length + 2 === cards.length) {\n          return setEndGame(true);\n        }\n        resetCards();\n      } else {\n        setMiss(miss + 1);\n        return setTimeout(resetCards, 1000);\n      }\n    }\n  };\n\n  library.add(faAdjust, faAllergies, faAngry, faAnchor,\n    faArchway, faAtom, faAsterisk, faBowlingBall, faQuestion);\n\n  return (\n    <div className=\"App\">\n      <StatusGame\n        endGame={endGame}\n        resetGame={resetGame}\n      />\n      <ScoreBoard miss={miss} />\n      <CardCollection\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solved={solved}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}